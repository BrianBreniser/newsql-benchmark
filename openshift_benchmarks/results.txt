---
---

Scaling machines to smaller vms

This is the before

Everything is on L8s

---
---


---

Running test final_md_l_1

---

YCSB Setup:
          update_proportion=0.0
          read_proportion=0.0
          insert_proportion=1.0
          num_keys=300000000
          value_size_bytes=2000
          batch_size=100
          num_clients=20
          threads_per_process=32
          max_execution_time_seconds=200000
          keys_per_host=$((num_keys / num_clients))
          operation_count=$((keys_per_process / batch_size))
          load_phase() {
              -p recordcount=$num_keys \
              -p db.batchsize=$batch_size \
              -p maxexecutiontime=$max_execution_time_seconds \
              -p readproportion=$read_proportion \
              -p updateproportion=$update_proportion \
              -p insertproportion=$insert_proportion \
              -p threadcount=$threads_per_process
          run_phase() {
              -p recordcount=$num_keys \
              -p foundationdb.batchsize=$batch_size \
              -p maxexecutiontime=$max_execution_time_seconds \
              -p readproportion=$read_proportion \
              -p insertproportion=$insert_proportion \
              -p updateproportion=$update_proportion \
              -p threadcount=$threads_per_process
          for i in `seq 0 4`; do
            load_phase $i &

Database Config:
Process Counts:

---

Running test final_md_l_1

---

YCSB Setup:
          update_proportion=0.0
          read_proportion=0.0
          insert_proportion=1.0
          num_keys=300000000
          value_size_bytes=2000
          batch_size=100
          num_clients=20
          threads_per_process=32
          max_execution_time_seconds=200000
          keys_per_host=$((num_keys / num_clients))
          operation_count=$((keys_per_process / batch_size))
          load_phase() {
              -p recordcount=$num_keys \
              -p db.batchsize=$batch_size \
              -p maxexecutiontime=$max_execution_time_seconds \
              -p readproportion=$read_proportion \
              -p updateproportion=$update_proportion \
              -p insertproportion=$insert_proportion \
              -p threadcount=$threads_per_process
          run_phase() {
              -p recordcount=$num_keys \
              -p foundationdb.batchsize=$batch_size \
              -p maxexecutiontime=$max_execution_time_seconds \
              -p readproportion=$read_proportion \
              -p insertproportion=$insert_proportion \
              -p updateproportion=$update_proportion \
              -p threadcount=$threads_per_process
          for i in `seq 0 4`; do
            load_phase $i &

Database Config:
Process Counts:

latency probes after 2 minutes of running

Throughput (ops/sec): 91060
Runtime (ms): 329448989
OperationCountInsert: 300000000
ErrorCountInsert: 0
SuccessCountInsert: 300000000
SuccessCountInsertBatched: 0
UnknownCountInsert: 0
AverageInsertLatency: 34851
OperationCountRead: 0
ErrorCountRead: 0
SuccessCountRead: 0
SuccessCountReadBatched: 0
UnknownCountRead: 0
AverageReadLatency: 0
95thPercentileReadLatency: 0
99thPercentileReadLatency: 0
OperationCountUpdate: 0
ErrorCountUpdate: 0
SuccessCountUpdate: 0
SuccessCountUpdateBatched: 0
UnknownCountUpdate: 0
AverageUpdateLatency: 0
95thPercentileUpdateLatency: 88
99thPercentileUpdateLatency: 195
95thPercentileInsertLatency: 46015
99thPercentileInsertLatency: 51807

---

Running test final_md_w_timed_1

---

YCSB Setup:
          update_proportion=0.0
          read_proportion=0.0
          insert_proportion=1.0
          num_keys=300000000
          value_size_bytes=2000
          batch_size=100
          num_clients=20
          threads_per_process=32
          max_execution_time_seconds=300
          keys_per_host=$((num_keys / num_clients))
          operation_count=$((keys_per_process / batch_size))
          load_phase() {
              -p recordcount=$num_keys \
              -p db.batchsize=$batch_size \
              -p maxexecutiontime=$max_execution_time_seconds \
              -p readproportion=$read_proportion \
              -p updateproportion=$update_proportion \
              -p insertproportion=$insert_proportion \
              -p threadcount=$threads_per_process
          run_phase() {
              -p recordcount=$num_keys \
              -p foundationdb.batchsize=$batch_size \
              -p maxexecutiontime=$max_execution_time_seconds \
              -p readproportion=$read_proportion \
              -p insertproportion=$insert_proportion \
              -p updateproportion=$update_proportion \
              -p threadcount=$threads_per_process
          for i in `seq 0 4`; do
            run_phase $i &

Database Config:
Process Counts:

latency probes after 2 minutes of running

Throughput (ops/sec): 323346
Runtime (ms): 30063457
OperationCountInsert: 97208281
ErrorCountInsert: 0
SuccessCountInsert: 972082
SuccessCountInsertBatched: 96236199
UnknownCountInsert: 0
AverageInsertLatency: 10461
OperationCountRead: 0
ErrorCountRead: 0
SuccessCountRead: 0
SuccessCountReadBatched: 0
UnknownCountRead: 0
AverageReadLatency: 0
95thPercentileReadLatency: 0
99thPercentileReadLatency: 0
OperationCountUpdate: 0
ErrorCountUpdate: 0
SuccessCountUpdate: 0
SuccessCountUpdateBatched: 0
UnknownCountUpdate: 0
AverageUpdateLatency: 0
95thPercentileUpdateLatency: 74
99thPercentileUpdateLatency: 103167
95thPercentileInsertLatency: 1
99thPercentileInsertLatency: 326911

---

Running test final_md_r_timed_1

---

YCSB Setup:
          update_proportion=0.0
          read_proportion=1.0
          insert_proportion=0.0
          num_keys=300000000
          value_size_bytes=2000
          batch_size=50
          num_clients=20
          threads_per_process=32
          max_execution_time_seconds=300
          keys_per_host=$((num_keys / num_clients))
          operation_count=$((keys_per_process / batch_size))
          load_phase() {
              -p recordcount=$num_keys \
              -p db.batchsize=$batch_size \
              -p maxexecutiontime=$max_execution_time_seconds \
              -p readproportion=$read_proportion \
              -p updateproportion=$update_proportion \
              -p insertproportion=$insert_proportion \
              -p threadcount=$threads_per_process
          run_phase() {
              -p recordcount=$num_keys \
              -p foundationdb.batchsize=$batch_size \
              -p maxexecutiontime=$max_execution_time_seconds \
              -p readproportion=$read_proportion \
              -p insertproportion=$insert_proportion \
              -p updateproportion=$update_proportion \
              -p threadcount=$threads_per_process
          for i in `seq 0 4`; do
            run_phase $i &

Database Config:
Process Counts:

latency probes after 2 minutes of running

Throughput (ops/sec): 585202
Runtime (ms): 30030221
OperationCountInsert: 0
ErrorCountInsert: 0
SuccessCountInsert: 0
SuccessCountInsertBatched: 0
UnknownCountInsert: 0
AverageInsertLatency: 0
OperationCountRead: 175737000
ErrorCountRead: 0
SuccessCountRead: 3514740
SuccessCountReadBatched: 172222260
UnknownCountRead: 0
AverageReadLatency: 6671
95thPercentileReadLatency: 2
99thPercentileReadLatency: 301055
OperationCountUpdate: 0
ErrorCountUpdate: 0
SuccessCountUpdate: 0
SuccessCountUpdateBatched: 0
UnknownCountUpdate: 0
AverageUpdateLatency: 0
95thPercentileUpdateLatency: 99
99thPercentileUpdateLatency: 6463
95thPercentileInsertLatency: 0
99thPercentileInsertLatency: 0
